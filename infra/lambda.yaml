AWSTemplateFormatVersion: '2010-09-09'
Description: Get RSVP data from dynamodb.
Resources:
  RSVPGet:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-dynamodb-role
      Code:
        ZipFile: >
          import boto3

          from decimal import *

          import json

          from boto3.dynamodb.types import TypeDeserializer
          
          #json lib does not support Decimal

          #so extending JSONEncoder to pass to json.Dumps
          
          class DecimalEncoder(json.JSONEncoder):
            def default(self, obj):
              if isinstance(obj, Decimal):
                return str(obj)
              return json.JSONEncoder.default(self, obj)
                  
          def handler(event, context):
            queryStringParams = event['queryStringParameters']

            if queryStringParams.get('code','') == '':
              return {"status":400, "error":"must provide rsvp code"}

            client = boto3.client('dynamodb')
            response = client.get_item(
              TableName='rsvp',
              Key={
                'code': {
                  'S': event['queryStringParameters']['code'],
                }
              }
            )

            item = response.get('Item')
            
            deserializer = TypeDeserializer()
            deserialized_data = {k: deserializer.deserialize(v) for k,v in item.items()}

            message = {
            'message': deserialized_data
            }
            
            return {
              'statusCode': 200,
              'headers': {'Content-Type': 'application/json'},
              'body': json.dumps(message, cls=DecimalEncoder)
            }
      Handler: index.handler

      Description: Get RSVP data from dynamodb.

  RSVPPut:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-dynamodb-role
      Code:
        ZipFile: >
          import boto3

          from botocore.exceptions import ClientError

          import logging

          logger = logging.getLogger(__name__)

          def handler(event, context):
            queryStringParams = event['queryStringParameters']

            if queryStringParams.get('code','') == '':
              return {"status":400, "error":"must provide rsvp code"}

            client = boto3.client('dynamodb')

            rawItem = client.get_item(
              TableName='rsvp',
              Key={
                'code': {
                  'S': queryStringParams.get('code'),
                }
              },
              AttributesToGet=[
                'limit',
              ],
            )

            limit = int(rawItem['Item']['limit']['N'])
            
            rsvp = 0
            if int(event.get('rsvp',0)) <= limit and event.get('rsvp',0) != 0:
              int(event.get('rsvp'))

            try:
              response = client.update_item(
                TableName='rsvp',
                Key={
                  'code': {
                    'S': queryStringParams.get('code'),
                  },
                },
                AttributeUpdates={
                  'address': {
                    'Value': {
                      'S': queryStringParams.get('address',''),
                    },
                    'Action': 'PUT',
                  },
                  'addresstwo': {
                    'Value':{
                      'S': queryStringParams.get('addresstwo',''),
                    },
                    'Action': 'PUT',
                  },
                  'city': {
                    'Value': {
                      'S': queryStringParams.get('city',''),
                    },
                    'Action': 'PUT',
                  },
                  'country': {
                    'Value': {
                      'S': queryStringParams.get('country',''),
                    },
                    'Action': 'PUT',
                  },
                  'email': {
                    'Value': {
                      'S': queryStringParams.get('email',''),
                    },
                    'Action': 'PUT',
                  },
                  'hasrsvp': {
                    'Value': {
                      'BOOL': True,
                    },
                    'Action': 'PUT',
                  },
                  'rsvp': {
                    'Value': {
                      'N': str(rsvp),
                    },
                    'Action': 'PUT',
                  },
                  'state': {
                    'Value': {
                      'S': queryStringParams.get('state',''),
                    },
                    'Action': 'PUT',
                  },
                  'zip': {
                    'Value': {
                      'S': queryStringParams.get('zip',''),
                    },
                    'Action': 'PUT',
                  },
                },
              )
            except ClientError as err:
              logger.error(
                "unable to update record %s due to %s ... %s", event['code'], err.response['Error']['Code'], err.response['Error']['Message']
              )
              return {"status":400, "error":"unable to update record"}
            else: 
              return {'status':200}
      Handler: index.handler

      Description: Put RSVP data to dynamodb.

  Gateway:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: RSVP
      Description: "RSVP API"
      FailOnWarnings: True
      EndpointConfiguration:
        Types: 
        - REGIONAL

  GatewayDeployment:
    DependsOn: RSVPGetRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Gateway
      StageName: Dummy

  GatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref GatewayDeployment
      MethodSettings: 
        - HttpMethod: "*"
        - ResourcePath: "/*"
      RestApiId: !Ref Gateway
      StageName: "LATEST"

  RSVPResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Gateway
      ParentId: !GetAtt Gateway.RootResourceId
      PathPart: "rsvp"
  
  RSVPGetRequest:
    DependsOn: PutPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt RSVPGet.Arn
        IntegrationResponses:
          - StatusCode: 200
      #   RequestTemplates:
      #     "application/json": "{\n \"code\": \"$input.params('code')\"\n}"
      # RequestParameters:
      #   "method.request.querystring.code": False
      ResourceId: !Ref RSVPResource
      RestApiId: !Ref Gateway
      MethodResponses:
        - StatusCode: 200

  RSVPPutRequest:
    DependsOn: PutPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt RSVPPut.Arn
        IntegrationResponses:
          - StatusCode: 200
      #   RequestTemplates:
      #     "application/json": 
      #       !Join
      #       - ","
      #       - - "{\n \"code\": \"$input.params('code')\""
      #         - "\"address\": \"$input.params('address')\""
      #         - "\"addresstwo\": \"$input.params('addresstwo')\""
      #         - "\"city\": \"$input.params('city')\""
      #         - "\"country\": \"$input.params('country')\""
      #         - "\"email\": \"$input.params('email')\""
      #         - "\"rsvp\": \"$input.params('rsvp')\""
      #         - "\"state\": \"$input.params('LA')\""
      #         - "\"zip\": \"$input.params('zip')\""
      # RequestParameters:
      #   "method.request.querystring.code": False
      ResourceId: !Ref RSVPResource
      RestApiId: !Ref Gateway
      MethodResponses:
        - StatusCode: 200

  GetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RSVPGet.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref Gateway, "/*"]]

  PutPermission:
    DependsOn: GetPermission
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RSVPPut.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref Gateway, "/*"]]